// Copyright 2018-2020 Burak Sezer
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package olric

import (
	"sync"

	"github.com/buraksezer/olric/config"
	"github.com/buraksezer/olric/internal/cluster/partitions"
	"github.com/buraksezer/olric/internal/discovery"
	"github.com/buraksezer/olric/internal/protocol"
	"github.com/vmihailenco/msgpack"
)

var rebalanceMtx sync.Mutex

type dmapbox struct {
	PartID    uint64
	Kind      partitions.Kind
	Name      string
	Payload   []byte
	AccessLog map[uint64]int64
}

// DEPRECATED
func (db *Olric) moveDMap(part *partitions.Partition, name string, dm *dmap, owner discovery.Member) error {
	dm.Lock()
	defer dm.Unlock()

	payload, err := dm.storage.Export()
	if err != nil {
		return err
	}
	data := &dmapbox{
		PartID:  part.Id(),
		Kind:    part.Kind(),
		Name:    name,
		Payload: payload,
	}
	// config structure will be regenerated by mergeDMap. Just pack the accessLog.
	if dm.config != nil && dm.config.accessLog != nil {
		data.AccessLog = dm.config.accessLog
	}
	value, err := msgpack.Marshal(data)
	if err != nil {
		return err
	}

	req := protocol.NewSystemMessage(protocol.OpMoveDMap)
	req.SetValue(value)
	_, err = db.requestTo(owner.String(), req)
	if err != nil {
		return err
	}

	// Delete moved dmap instance. the gc will free the allocated memory.
	part.Map().Delete(name)
	return nil
}

// DEPRECATED
func (db *Olric) rebalancePrimaryPartitions() {
	rsign := db.rt.Signature()
	for partID := uint64(0); partID < db.config.PartitionCount; partID++ {
		if !db.isAlive() {
			// The server is gone.
			break
		}

		if rsign != db.rt.Signature() {
			// Routing table is updated. Just quit. Another rebalancer goroutine will work on the
			// new table immediately.
			break
		}

		part := db.primary.PartitionById(partID)
		if part.Length() == 0 {
			// Empty partition. Skip it.
			continue
		}

		owner := part.Owner()
		// Here we don't use cmpMembersById function because the routing table has an eventually consistent
		// data structure and a node can try to move data to previous instance(the same name but a different birthdate)
		// of itself. So just check the name.
		if owner.CompareByName(db.rt.This()) {
			// Already belongs to me.
			continue
		}
		// This is a previous owner. Move the keys.
		part.Map().Range(func(name, dm interface{}) bool {
			db.log.V(2).Printf("[INFO] Moving DMap: %s (kind: %s) on PartID: %d to %s", name, part.Kind(), partID, owner)

			err := db.moveDMap(part, name.(string), dm.(*dmap), owner)
			if err != nil {
				db.log.V(2).Printf("[ERROR] Failed to move DMap: %s on PartID: %d to %s: %v", name, partID, owner, err)
			}
			// if this returns true, the iteration continues
			return rsign == db.rt.Signature()
		})
	}
}

// DEPRECATED
func (db *Olric) rebalanceBackupPartitions() {
	rsign := db.rt.Signature()
	for partID := uint64(0); partID < db.config.PartitionCount; partID++ {
		if !db.isAlive() {
			// The server is gone.
			break
		}

		part := db.backup.PartitionById(partID)
		if part.Length() == 0 {
			// Empty partition. Skip it.
			continue
		}
		owners := part.Owners()
		if len(owners) == db.config.ReplicaCount-1 {
			// everything is ok
			continue
		}

		var ids []uint64
		offset := len(owners) - 1 - (db.config.ReplicaCount - 1)
		for i := len(owners) - 1; i > offset; i-- {
			owner := owners[i]
			// Here we don't use cmpMembersById function because the routing table has an eventually consistent
			// data structure and a node can try to move data to previous instance(the same name but a different birthdate)
			// of itself. So just check the name.
			if db.rt.This().CompareByName(owner) {
				// Already belongs to me.
				continue
			}
			ids = append(ids, owner.ID)
		}

		for _, id := range ids {
			if !db.isAlive() {
				// The server is gone.
				break
			}

			if rsign != db.rt.Signature() {
				// Routing table is updated. Just quit. Another rebalancer goroutine will work on the
				// new table immediately.
				break
			}

			owner, err := db.rt.Discovery().FindMemberByID(id)
			if err != nil {
				db.log.V(2).Printf("[ERROR] Failed to get host by id: %d: %v", id, err)
				continue
			}

			part.Map().Range(func(name, dm interface{}) bool {
				db.log.V(2).Printf("[INFO] Moving DMap: %s (kind: %s) on PartID: %d to %s",
					name, part.Kind(), partID, owner)
				err := db.moveDMap(part, name.(string), dm.(*dmap), owner)
				if err != nil {
					db.log.V(2).Printf("[ERROR] Failed to move backup DMap: %s on PartID: %d to %s: %v",
						name, partID, owner, err)
				}
				// if this returns true, the iteration continues
				return rsign == db.rt.Signature()
			})
		}
	}
}

// DEPRECATED
func (db *Olric) rebalancer() {
	rebalanceMtx.Lock()
	defer rebalanceMtx.Unlock()

	if err := db.isOperable(); err != nil {
		db.log.V(2).Printf("[WARN] Rebalancer awaits for bootstrapping")
		return
	}
	db.rebalancePrimaryPartitions()
	if db.config.ReplicaCount > config.MinimumReplicaCount {
		db.rebalanceBackupPartitions()
	}
}
