olricd:
  bindAddr: "0.0.0.0"
  bindPort: 3320
  serializer: "msgpack"
  keepAlivePeriod: "300s"
  bootstrapTimeout: "5s"
  partitionCount:  13
  replicaCount: 1
  writeQuorum: 1
  readQuorum: 1
  readRepair: false
  replicationMode: 0 # sync mode. for async, set 1
  memberCountQuorum: 1

storageEngines:
  config:
    olric.kvstore:
      tableSize: 102134

client:
  dialTimeout: "-1s"
  readTimeout: "3s"
  writeTimeout: "3s"
  keepAlive: "15s"
  minConn: 1
  maxConn: 100

logging:
  verbosity: 6
  level: "DEBUG"
  output: "stderr"

memberlist:
  environment: "local"
  bindAddr: "0.0.0.0"
  bindPort: 3322
  enableCompression: false
  joinRetryInterval: "1ms"
  maxJoinAttempts: 1
  #peers:
  #  - "localhost:3325"

  #advertiseAddr: ""
  #advertisePort: 3322
  #suspicionMaxTimeoutMult: 6
  #disableTCPPings: false
  #awarenessMaxMultiplier: 8
  #gossipNodes: 3
  #gossipVerifyIncoming: true
  #gossipVerifyOutgoing: true
  #dnsConfigPath: "/etc/resolv.conf"
  #handoffQueueDepth: 1024
  #udpBufferSize: 1400

dmaps:
  numEvictionWorkers: 1
  maxIdleDuration: ""
  ttlDuration: "100s"
  maxKeys: 100000
  maxInuse: 1000000
  lRUSamples: 10
  evictionPolicy: "LRU"
  custom:
   foobar:
      maxIdleDuration: "60s"
      ttlDuration: "300s"
      maxKeys: 500000
      lRUSamples: 20
      evictionPolicy: "NONE"


#serviceDiscovery:
#  # path is a required property and used by Olric. It has to be a full path.
#  path: "/home/burak/go/src/github.com/buraksezer/olric-consul-plugin/consul.so"
#
#  # provider is just informal,
#  provider: "consul"
#
#  # Plugin specific configuration
#  # Consul server, used by the plugin. It's required
#  address: "http://127.0.0.1:8500"
#
#  # Specifies that the server should return only nodes with all checks in the passing state.
#  passingOnly: true
#
#  # Missing health checks from the request will be deleted from the agent. Using this parameter
#  # allows to idempotently register a service and its checks without having to manually deregister
#  # checks.
#  replaceExistingChecks: true
#
#  # InsecureSkipVerify controls whether a client verifies the
#  # server's certificate chain and host name.
#  # If InsecureSkipVerify is true, TLS accepts any certificate
#  # presented by the server and any host name in that certificate.
#  # In this mode, TLS is susceptible to man-in-the-middle attacks.
#  # This should be used only for testing.
#  insecureSkipVerify: true
#
#  # service record
#  payload: '
#      {
#          "Name": "olric-cluster",
#          "ID": "olric-node-1",
#          "Tags": [
#            "primary",
#            "v1"
#          ],
#          "Address": "localhost",
#          "Port": 3322,
#          "EnableTagOverride": false,
#          "check": {
#            "name": "Olric node on 3322",
#            "tcp": "0.0.0.0:3322",
#            "interval": "10s",
#            "timeout": "1s"
#          }
#      }
#'
#
#
#serviceDiscovery:
#  provider: "k8s"
#  path: "/Users/buraksezer/go/src/github.com/buraksezer/olric-cloud-plugin/olric-cloud-plugin.so"
#  args: 'label_selector="app = olricd-server"'
